from contextlib import asynccontextmanager

from aiogram import Router
from aiogram import types
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram import F
from sqlalchemy import func
from sqlalchemy.orm import selectinload

from database.database import AsyncSessionLocal as async_session
from database.utils import *
from .keyboards import *
from .scheduler import add_test_jobs, add_work_jobs

logger = logging.getLogger(__name__)
router = Router()


def register_handlers(dp):
    dp.include_router(router)


@router.message(lambda message: message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é')
async def go_back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_keyboard)


@router.message(lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ')
async def stop_state_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer('–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=main_menu_keyboard)


@router.callback_query(lambda message: message.data == 'confirm_save')
async def confirm_save_handler(callback_query: types.CallbackQuery, state: FSMContext):
    async with get_session() as session:
        data = await state.get_data()
        mission_data = data.get('mission_data')

        if mission_data:
            user_id = callback_query.from_user.id
            user_query = select(User).where(User.tg_user_id == user_id)
            user = await session.scalar(user_query)

            if user is None:
                user = add_user(session, user_id, callback_query.from_user.username)
                await session.commit()

            mission = await add_mission(
                session=session,
                user_id=user_id,
                goal=mission_data['goal'],
                total_amount=mission_data['total_amount'],
                income=mission_data['income'],
                period_payments=mission_data['period_payments']
            )

            await create_payments(session, mission, mission_data['period_payments'], mission_data['equal_payment'],
                                  mission_data['remainder'])
            await callback_query.message.answer('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', reply_markup=main_menu_keyboard)
            await state.clear()
        else:
            await callback_query.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',
                                                reply_markup=main_menu_keyboard)


@router.callback_query(lambda message: message.data == 'cancel_save')
async def cancel_save_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        reply_markup=main_menu_keyboard
    )
    await state.clear()


@asynccontextmanager
async def get_session() -> AsyncSession:
    async with async_session() as session:
        yield session


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    async with (get_session() as session):
        #user =
        await add_user(session, message.from_user.id, message.from_user.username)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π.\n'
                         '–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Ü–µ–ª—å, —Å—É–º–º—É, –¥–∞—Ç—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞–∫–æ–ø–∏—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ö–æ–¥–∞—Ö\n'
                         '–ê —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∏ —á–∞—Å—Ç–æ—Ç—É –≤–Ω–µ—Å–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏',
                         reply_markup=main_menu_keyboard)


class UserMissionState(StatesGroup):
    goal = State()
    total_amount = State()
    income = State()
    savings_percentage = State()


class GoalManagementState(StatesGroup):
    goal_number = State()
    delete_goal = State()
    confirm_delete = State()


@router.message(lambda message: message.text == 'üóíÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å')
async def add_goal(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ù–∞ —á—Ç–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∫–æ–ø–∏—Ç—å? –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π —Ü–µ–ª–∏:',
                         reply_markup=stop_state_keyboard)
    await state.set_state(UserMissionState.goal)


@router.message(UserMissionState.goal)
async def goal_handler(message: Message, state: FSMContext):
    async with get_session() as session:
        goal = message.text.strip()
        user_id = message.from_user.id

        lower_goal = goal.lower()

        existing_mission_query = select(Mission).where(Mission.user_id == user_id)
        existing_mission = await session.scalars(existing_mission_query)

        for mission in existing_mission:
            if mission.goal.lower() == lower_goal:
                await message.answer('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ü–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
                return

        await state.update_data(goal=goal)
        await message.answer('–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:', reply_markup=stop_state_keyboard)
        await state.set_state(UserMissionState.total_amount)


@router.message(UserMissionState.total_amount)
async def total_amount_handler(message: Message, state: FSMContext):
    try:
        total_amount = int(message.text)
        await state.update_data(total_amount=total_amount)

        await message.answer('–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞?', reply_markup=stop_state_keyboard)
        await state.set_state(UserMissionState.income)
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–π —Ü–µ–ª–∏ —á–∏—Å–ª–æ–º:')


@router.message(UserMissionState.income)
async def income_handler(message: Message, state: FSMContext):
    try:
        income = int(message.text)
        await state.update_data(income=income)

        await message.answer('–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –≤—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω–æ?',
                             reply_markup=stop_state_keyboard)
        await state.set_state(UserMissionState.savings_percentage)
    except ValueError:
        await message.answer('–°—É–º–º—É –¥–æ—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–º:')


@router.message(UserMissionState.savings_percentage)
async def savings_percentage_handler(message: Message, state: FSMContext):
    async with get_session() as session:
        try:
            savings_percentage = int(message.text)
            await state.update_data(savings_percentage=savings_percentage)

            data = await state.get_data()
            if not all(key in data for key in ['goal', 'total_amount', 'income', 'savings_percentage']):
                logger.error(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}')
                await message.answer('–û—à–∏–±–∫–∞: –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–∏')
                return

            goal = data['goal']
            total_amount = data['total_amount']
            income = data['income']

            monthly_savings = round(income * (savings_percentage / 100))

            if monthly_savings >= total_amount:
                await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ —Ü–µ–ª—å –∑–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü!', reply_markup=main_menu_keyboard)
                await state.clear()
                return

            period_payments = total_amount // monthly_savings

            equal_payment = total_amount // period_payments
            remainder = total_amount % period_payments

            user_id = message.from_user.id
            user_query = select(User).where(User.tg_user_id == user_id)
            user = await session.scalar(user_query)
            if user is None:
                user = User(tg_user_id=user_id, username=message.from_user.username)
                session.add(user)
                logging.info(f'–°–æ–∑–¥–∞–ª–∏ –≤ –±–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg id = {user.tg_user_id}')
                await session.commit()

            await state.update_data(
                mission_data={
                    'goal': goal,
                    'total_amount': total_amount,
                    'income': income,
                    'savings_percentage': savings_percentage,
                    'period_payments': period_payments,
                    'equal_payment': equal_payment,
                    'remainder': remainder,
                }
            )

            await message.answer(
                f"–¶–µ–ª—å: {goal}\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—É–º–º–∞: {total_amount}\n"
                f"–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: {income}\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è: {savings_percentage}%\n"
                f"–ü–µ—Ä–∏–æ–¥ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π: {period_payments} –º–µ—Å—è—Ü–µ–≤\n"
                f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å: {equal_payment}\n\n", reply_markup=confirmation_keyboard
            )

        except ValueError:
            await message.answer('–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–º:')


@router.message(lambda message: message.text == 'üí≠ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ü–µ–ª–∏')
async def goals_list_handler(message: Message, state: FSMContext):
    await state.clear()
    async with (get_session() as session):
        user_id = message.from_user.id
        goals = await list_of_goals(session, user_id)

        if goals:
            goals_list = [f'{idx + 1}. {goal.goal}' for idx, goal in enumerate(goals)]
            goals_text = f'\n'.join(goals_list)

            await message.answer(f'–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π:\n{goals_text}\n\n')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–µ–ª–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
            await state.set_state(GoalManagementState.goal_number)
        else:
            await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π', reply_markup=main_menu_keyboard)
            return


@router.message(GoalManagementState.goal_number)
async def goal_details_handler(message: Message, state: FSMContext):
    if message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å":
        data = await state.get_data()
        selected_goal_id = data.get('selected_goal_id')

        if selected_goal_id:
            await state.set_state(GoalManagementState.confirm_delete)
            await goal_current_handler(message, state)
            return
        else:
            await goal_delete_handler(message, state)
            return
    try:
        number = int(message.text) - 1
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ü–µ–ª–∏')
        return

    async with get_session() as session:
        user_id = message.from_user.id
        goals = await session.execute(select(Mission)
                                      .where(Mission.user_id == user_id)
                                      .options(selectinload(Mission.payments)))
        goals = goals.scalars().all()

    if 0 <= number < len(goals):
        selected_goal = goals[number]
        payments = selected_goal.payments

        await state.update_data(selected_goal_id=selected_goal.id)

        data = await state.get_data()
        delete_it = data.get('delete_it', False)

        if delete_it:
            await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å?\n"
                                 "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            await state.set_state(GoalManagementState.confirm_delete)

        else:
            payments_count = len([payment for payment in payments if not payment.is_done])
            goal_info = (
                f"–¶–µ–ª—å: {selected_goal.goal}\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—É–º–º–∞: {selected_goal.total_amount}\n"
                f"–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {selected_goal.saved_amount}\n"
                f"–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: {selected_goal.income}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {payments_count} –º–µ—Å—è—Ü–µ–≤\n"
            )
            payment = payments[0]
            goal_info += (f'–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å: {payment.amount}'
                          )

            await message.answer(goal_info, reply_markup=list_keyboard)

    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ü–µ–ª–∏\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')


@router.message(lambda message: message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å')
async def goal_delete_handler(message: Message, state: FSMContext):
    await state.clear()
    async with (get_session() as session):
        user_id = message.from_user.id
        goals = await list_of_goals(session, user_id)

        if goals:
            goals_list = [f'{idx + 1}. {goal.goal}' for idx, goal in enumerate(goals)]
            goals_text = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n' + '\n'.join(goals_list)

            await state.update_data(delete_it=True)

            await message.answer(goals_text)
            await state.set_state(GoalManagementState.goal_number)

        else:
            await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')


@router.message(GoalManagementState.goal_number)
async def goal_current_handler(message: Message, state: FSMContext):
    async with get_session() as session:
        data = await state.get_data()
        selected_goal_id = data.get('selected_goal_id')
        selected_goal = await session.get(Mission, selected_goal_id)

        if selected_goal:
            await message.answer("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª—å?\n"
                                 "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            await state.set_state(GoalManagementState.confirm_delete)

        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ü–µ–ª—å.', reply_markup=main_menu_keyboard)


@router.message(GoalManagementState.confirm_delete)
async def delete_confirmation_handler(message: Message, state: FSMContext):
    confirmation = message.text.lower()
    if confirmation == '–¥–∞':
        async with get_session() as session:
            data = await state.get_data()
            selected_goal_id = data.get('selected_goal_id')
            selected_goal = await session.get(Mission, selected_goal_id)

            if selected_goal:
                await session.delete(selected_goal)
                logger.info(f'–£–¥–∞–ª–∏–ª–∏ —Ü–µ–ª—å —Å id = {selected_goal_id}')
                await session.commit()
                await message.answer('–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', reply_markup=main_menu_keyboard)

            else:
                logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª—å —Å id = {selected_goal.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ü–µ–ª—å', reply_markup=main_menu_keyboard)

    else:
        await message.answer('–£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_menu_keyboard)

    await state.clear()


@router.callback_query(F.data.startswith('saved'))
async def process_callback_saved(callback_query: types.CallbackQuery):
    code = callback_query.data.replace('saved_', '')
    async with get_session() as session:
        text = await payment_set_is_done(session=session, payment_id=int(code))
    await callback_query.message.answer(text='–û—Ç–ª–∏—á–Ω–æ! ' + text, reply_markup=main_menu_keyboard)


@router.callback_query(F.data.startswith('repayment'))
async def process_callback_repayment(callback_query: types.CallbackQuery):
    code = callback_query.data.replace('repayment_', '')
    async with get_session() as session:
        text = await payment_move_in_end(session=session, payment_id=int(code))
    await callback_query.message.answer(text='–ì–æ—Ç–æ–≤–æ! ' + text, reply_markup=main_menu_keyboard)


@router.message(lambda message: message.text == '/test_start')
async def test_start_handler(message: Message, state: FSMContext):
    add_test_jobs(bot=message.bot)


@router.message(lambda message: message.text == '/test_stop')
async def test_start_handler(message: Message, state: FSMContext):
    add_work_jobs(bot=message.bot)
